' Gambas class file

Public ControladorAplicacion As Controlador

'------------------------------------------------------------------------
'Reglas del Negocio: http://es.wikipedia.org/wiki/Reglas_de_negocio
'------------------------------------------------------------------------
'Esta clase contiene las "condiciones" para poder a√±adir/modificar/borrar la base de datos

'Public Function validarRegistroAlumno(DatosAlumno As Alumno) As Boolean

'  Return True

'End

Public Function validarAnnadirAlumno(DatosAlumnos As AlumnoVO) As Boolean
  
  Dim miAlumno As New AlumnoDAO
  Dim rutadestino As String = ControladorAplicacion.rutaTrabajo & "Fotos/" & File.Name(DatosAlumnos.RutaFoto)
  
  'Trato el fichero de la foto del alumno:
  '1 caso de que no haya fichero del alumno, poner una transparencia...
  If DatosAlumnos.rutafoto = "icono_fotos_personas.png" Then
    rutadestino = ControladorAplicacion.rutaTrabajo & "Fotos/transparente.png"
  Else 
    Try Copy DatosAlumnos.RutaFoto To rutadestino
  Endif
  'dejo solo el nombre...
  DatosAlumnos.RutaFoto = File.Name(rutadestino)  
  
  Return miAlumno.registrar(DatosAlumnos)
  
End

Public Function validarAnnadirCurso(datos As Cursovo) As Boolean
  
  Dim micurso As New CursoDAO
  
  Return micurso.registrar(datos)
  
End

Public Function validarAnnadirRela(datos As RelacionVo) As Boolean
  
  Dim mirela As New RelacionDAO
  
  Return mirela.registrar(datos)
  
End

Public Function mostrarRelacionesIdAlumno(idalumno As Integer) As Result
  
  Dim mirela As New RelacionDAO
  
  Return mirela.sql("Select * From Relacion where idalumno=" & Str$(idAlumno))
  
End

Public Function ContenidoAlumnos() As Result
  
  Dim mialumno As New AlumnoDAO
  
  Return mialumno.contenido()   
  
End

Public Function ContenidoCurso() As Result
  
  Dim micurso As New CursoDAO
  
  Return micurso.contenido()
  
End

Public Function buscarIdAlumno(id As Integer) As AlumnoVO
  
  Dim mialumno As New AlumnoDAO
  Dim resultado As Result
  Dim retornoAlumno As New AlumnoVO
  
  resultado = mialumno.BuscarIgualIdAlumno(id)
  
  retornoAlumno.Apellido = resultado["Apellido"]
  retornoAlumno.Nombre = resultado["Nombre"]
  retornoAlumno.Documento = resultado["Documento"]
  retornoAlumno.FechaNacimiento = resultado["FechaNacimiento"]
  retornoAlumno.Documento = resultado["Domicilio"]
  retornoAlumno.Telefono = resultado["Telefono"]
  retornoAlumno.Nacionalidad = resultado["Nacionalidad"]
  retornoAlumno.EscOrigen = resultado["EscOrigen"]
  retornoAlumno.Legajo = resultado["Legajo"]
  retornoAlumno.RutaFoto = resultado["RutaFoto"]
  Return retornoAlumno
  
End

Public Function buscarIdCurso(id As Integer) As CursoVO
  
  Dim miCurso As New CursoDAO
  Dim resultado As Result
  Dim retornoCurso As New CursoVO
  
  resultado = micurso.BuscarIgualIdCurso(id)
  retornoCurso.Nombre = resultado["Nombre"]
  retornoCurso.Detalle = resultado["Detalle"]
  Return retornoCurso
  
End

Public Function ModificarIdAlumno(mialumnotmp As AlumnoVO) As Boolean
  
  Dim mialumno As New AlumnoDAO
  
  Return mialumno.ModificarIdAlumno(mialumnotmp.idAlumno, mialumnotmp)
  
End

Public Function ModificarIdCurso(micursotmp As CursoVO) As Boolean
  
  Dim micurso As New CursoDAO
  
  Return micurso.ModificarIdCurso(micursotmp.idcurso, micursotmp)
  
End

Public Function borrarIdAlumno(id As Integer) As Boolean
  
  Dim mialumno As New AlumnoDAO
  
  Return mialumno.BorrarIdAlumno(id)
  
End

Public Function borrarIdcurso(id As Integer) As Boolean
  
  Dim micurso As New CursoDAO
  
  Return micurso.BorrarIdCurso(id)
  
End
